library(tidyverse)
library(forecast)
library(highcharter)
library(lubridate)
# PART 1
index <- seq(as.Date("2016-01-01"), length=150, by="weeks")
data <- data.frame(input=round(rnorm(150,80,30),0), sales=round(rnorm(150,80,30),0), cps=round(rnorm(150,1500,500),0))
# PART 2
ts <- xts::as.xts(data, order.by=index)
# PART 3: define window scope
a <- ts %>% index %>% min
b <- ts %>% index %>% max
input <- as.ts(coredata(ts$input), start=c(a), end=c(b), 12, by='weeks') 

input <- ts(as.numeric(ts$input), start=as.Date('2017-01-01'), freq=52)
input %>% forecast() %>% hchart()

output <- ts(as.numeric(ts$sales), start=c(2016), freq=52)
output %>% forecast() %>% hchart()

ts(as.numeric(ts$cps), start=c(2016,1), freq=12) %>% forecast() %>% hchart()
cps %>% forecast() %>% hchart()

ts$cat <- sample(letters[1:10], length(ts$input), replace = T)
df <- as_data_frame(ts)
df$input <- as.numeric(df$input)
df$sales <- as.numeric(df$sales)
df$id <- 1:length(df$input)
df$cat <- as.factor(df$cat)
str(df)
treemap(df, index=c("cat","cat"), vSize = "input", type = "value", vColor = "id")

library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)

# note that this file is somewhat big so it might take a couple
# of minutes to download
url<-"http://www2.census.gov/geo/tiger/TIGER2010DP1/County_2010Census_DP1.zip"
downloaddir<-"d:/Leaflet"
destname<-"tiger.zip"
download.file(url, destname)
unzip(destname, exdir=downloaddir, junkpaths=TRUE)
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename<-gsub(".shp", "", filename)

# ----- Read in shapefile (NAD83 coordinate system)
# ----- this is a fairly big shapefile and takes 1 minute to read
dat<-readOGR(downloaddir, filename) 

# ----- Create a subset of New York counties
subdat<-dat[substring(dat$GEOID10, 1, 2) == "06",]

# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))

# ----- change name of field we will map
names(subdat)[names(subdat) == "DP0010001"]<-"Population"

# ----- save the data slot
subdat_data<-subdat@data[,c("GEOID10", "Population")]

# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)

# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)

# ----- Write data to GeoJSON
leafdat<-paste(downloaddir, "/", filename, ".geojson", sep="") 


writeOGR(subdat, leafdat, layer="", driver="GeoJSON")


# ----- Create the cuts
cuts<-round(quantile(subdat$Population, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
cuts[1]<-0 # ----- for this example make first cut zero


# ----- Fields to include in the popup
popup<-c("GEOID10", "Population")


# ----- Gradulated style based on an attribute
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
               style.val=rev(heat.colors(6)), leg="Population (2010)", lwd=1)


# ----- Create the map and load into browser
map<-leaflet(data=leafdat, dest=downloaddir, style=sty,
             title="index", base.map="osm",
             incl.data=TRUE,  popup=popup)

# ----- to look at the map you can use this code
browseURL(map)
